{"version":3,"sources":["components/Button.js","components/Clear.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Button","isOperator","val","isNaN","className","this","props","children","onClick","handleClick","React","Component","Clear","handleClear","Input","App","addToInput","setState","input","state","addZeroToInput","addDecimal","indexOf","clearInput","add","previousNumber","operator","subtract","multiply","division","evaluate","currentNumber","parseFloat","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c24c1ac2.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\n\nclass Button extends React.Component {\n\n    isOperator = val => {\n        return !isNaN(val) || val === '.' || val === '=';\n    };\n\n\n\n    render () {\n        return (\n            <div className={`button ${this.isOperator(this.props.children) ? \"\" : \"operator\"}`}\n            onClick= {() => this.props.handleClick(this.props.children)}\n            >\n                {this.props.children}\n               \n            </div>\n        );\n    }\n}\n\nexport default Button;\n","import React from 'react';\nimport './Clear.css';\n\n\nclass Clear extends React.Component {\n    render() {\n        return(\n            <div className=\"clear\" onClick={ () => {this.props.handleClear()}}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Clear;","import React from 'react';\nimport './Input.css';\n\n\n\nclass Input extends React.Component {\n    render () {\n        return (\n            <div className=\"input\">\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\n\nexport default Input;","import React from 'react';\nimport './App.css';\nimport Button from './components/Button';\n// import Practise from './Practise';\nimport Clear from './components/Clear';\nimport Input from './components/Input';\n\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      input: \"\",\n      previousNumber: \"\",\n      currentNumber: \"\",\n      operator: \"\"\n    };\n  }\n\n    addToInput = val => {\n       this.setState({ input: this.state.input + val });\n      };\n    \n    addZeroToInput = val => {\n      if(this.state.input !== \"\"){\n        this.setState({ input : this.state.input + val });\n      }\n    };\n\n    addDecimal = val => {\n      if(this.state.input.indexOf(\".\") === -1) {\n        this.setState({ input : this.state.input + val });\n      }\n    };\n\n    clearInput = () => {\n      this.setState({ input : \"\" });\n    };\n\n    add = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({ input : \"\"})\n      this.state.operator = \"plus\";\n    };\n\n    subtract = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({ input : \"\"})\n      this.state.operator = \"minus\";\n    };\n\n    multiply = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({ input : \"\"})\n      this.state.operator = \"multiply\";\n    };\n\n    division = () => {\n      this.state.previousNumber = this.state.input;\n      this.setState({ input : \"\"})\n      this.state.operator = \"divide\";\n    };\n\n\n    evaluate = () => {\n      this.state.currentNumber = this.state.input;\n      if(this.state.operator == \"plus\") {\n        this.setState({\n          input:\n            parseFloat(this.state.previousNumber) +\n            parseFloat(this.state.currentNumber)\n      });\n      } else if(this.state.operator == \"minus\") {\n        this.setState({\n          input:\n            parseFloat(this.state.previousNumber) -\n            parseFloat(this.state.currentNumber)\n      });\n      } else if(this.state.operator == \"multiply\") {\n        this.setState({\n          input:\n            parseFloat(this.state.previousNumber) *\n            parseFloat(this.state.currentNumber)\n      });\n      } else if (this.state.operator == \"divide\") {\n        this.setState({\n          input:\n            parseFloat(this.state.previousNumber) /\n            parseFloat(this.state.currentNumber)\n      });\n      } \n    };\n\n    \n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"calc-wrapper\">\n            <div className= \"row\">\n                <Input>{this.state.input}</Input>\n            </div>\n              <div className=\"row\">\n                <Button handleClick={this.addToInput}>7</Button>\n                <Button handleClick={this.addToInput}>8</Button>\n                <Button handleClick={this.addToInput}>9</Button>\n                <Button handleClick={this.division}>/</Button>\n              </div>\n\n              <div className=\"row\">\n                <Button handleClick={this.addToInput}>4</Button>\n                <Button handleClick={this.addToInput}>5</Button>\n                <Button handleClick={this.addToInput}>6</Button>\n                <Button handleClick={this.multiply}>*</Button>\n              </div>\n\n              <div className=\"row\">\n                <Button handleClick={this.addToInput}>1</Button>\n                <Button handleClick={this.addToInput}>2</Button>\n                <Button handleClick={this.addToInput}>3</Button>\n                <Button handleClick={this.add}>+</Button>\n              </div>\n\n              <div className=\"row\">\n                <Button handleClick={this.addDecimal}>.</Button>\n                <Button handleClick={this.addZeroToInput}>0</Button>\n                <Button handleClick={this.evaluate}>=</Button>\n                <Button handleClick={this.subtract}>-</Button>\n              </div>\n\n              <div className=\"row\">\n                <Clear  handleClear={this.clearInput}>Clear</Clear>\n              </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}